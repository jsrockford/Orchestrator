> Write a Python function `compare_parser_outputs(raw: str, parsed: str) ->
dict` that compares two strings and returns counts of lines, characters, and
 a boolean flag for equality. Include doctest-style usage examples.

● def compare_parser_outputs(raw: str, parsed: str) -> dict:
      """
      Compare raw and parsed output strings, returning statistics and
  equality check.

      Args:
          raw: Raw output string (unprocessed)
          parsed: Parsed/cleaned output string

      Returns:
          Dictionary containing:
              - raw_lines: Number of lines in raw output
              - parsed_lines: Number of lines in parsed output
              - raw_chars: Number of characters in raw output
              - parsed_chars: Number of characters in parsed output
              - lines_removed: Number of lines filtered out (raw_lines -
  parsed_lines)
              - chars_removed: Number of characters filtered out (raw_chars
  - parsed_chars)
              - is_equal: Boolean indicating if strings are identical
              - reduction_percent: Percentage of characters removed (0-100)

      Examples:
          >>> result = compare_parser_outputs("hello\\nworld",
  "hello\\nworld")
          >>> result['is_equal']
          True
          >>> result['raw_lines']
          2
          >>> result['parsed_lines']
          2

          >>> result = compare_parser_outputs("line1\\nline2\\nline3",
  "line1\\nline3")
          >>> result['is_equal']
          False
          >>> result['lines_removed']
          1
          >>> result['raw_lines']
          3
          >>> result['parsed_lines']
          2

          >>> result = compare_parser_outputs("\\x1b[32mGreen text\\x1b[0m",
   "Green text")
          >>> result['is_equal']
          False
          >>> result['chars_removed']
          9
          >>> result['reduction_percent']
          45.0

          >>> result = compare_parser_outputs("", "")
          >>> result['is_equal']
          True
          >>> result['reduction_percent']
          0.0

          >>> result = compare_parser_outputs("Raw: 100 chars", "Parsed:
  50")
          >>> result['raw_chars'] > result['parsed_chars']
          True
      """
      # Count lines (handle empty strings)
      raw_lines = len(raw.splitlines()) if raw else 0
      parsed_lines = len(parsed.splitlines()) if parsed else 0

      # Count characters
      raw_chars = len(raw)
      parsed_chars = len(parsed)

      # Calculate differences
      lines_removed = raw_lines - parsed_lines
      chars_removed = raw_chars - parsed_chars

      # Calculate reduction percentage
      reduction_percent = (chars_removed / raw_chars * 100) if raw_chars > 0
   else 0.0

      return {
          'raw_lines': raw_lines,
          'parsed_lines': parsed_lines,
          'raw_chars': raw_chars,
          'parsed_chars': parsed_chars,
          'lines_removed': lines_removed,
          'chars_removed': chars_removed,
          'is_equal': raw == parsed,
          'reduction_percent': round(reduction_percent, 2)
      }


  if __name__ == "__main__":
      import doctest
      doctest.testmod(verbose=True)

● This function provides comprehensive comparison metrics useful for
  verifying parser behavior. The reduction_percent metric is particularly
  helpful for detecting when parsers are either stripping too much (>80%) or
   not cleaning anything (<5%), both of which often indicate bugs in
  automation pipelines.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
> 
────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
  ⏵⏵ bypass permissions on (shift+tab to cycle)                                            Thinking on (tab to toggle)





