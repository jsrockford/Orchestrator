› Write a Python function `compare_parser_outputs(raw: str, parsed: str) -> dict` that compares two strings and returns
  counts of lines, characters, and a boolean flag for equality. Include doctest-style usage examples.


• def compare_parser_outputs(raw: str, parsed: str) -> dict:
      """
      Compare two parser outputs by lines, characters, and equality.

      Returns a dict with keys:
      - 'line_count_diff': absolute difference between line counts
      - 'char_count_diff': absolute difference between character counts
      - 'is_equal': True when the strings match exactly

      >>> compare_parser_outputs("ok\\nline", "ok\\nline")
      {'line_count_diff': 0, 'char_count_diff': 0, 'is_equal': True}
      >>> compare_parser_outputs("one\\ntwo", "one")
      {'line_count_diff': 1, 'char_count_diff': 3, 'is_equal': False}
      """
      raw_lines = raw.splitlines()
      parsed_lines = parsed.splitlines()
      line_diff = abs(len(raw_lines) - len(parsed_lines))
      char_diff = abs(len(raw) - len(parsed))
      return {
          "line_count_diff": line_diff,
          "char_count_diff": char_diff,
          "is_equal": raw == parsed,
      }


› Find and fix a bug in @filename

  100% context left · ? for shortcuts
