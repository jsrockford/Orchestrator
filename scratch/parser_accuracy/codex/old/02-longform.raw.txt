› Provide a detailed checklist (at least eight bullet points) of best practices for testing command-line automation
  harnesses that interact with tmux sessions.


• - Cover multi-pane/session lifecycle: create, rename, split, attach/detach, and kill sessions while scripts run to
    ensure the harness recovers from each tmux state change.
  - Validate prompt detection by injecting artificial delays, color codes, and noisy output into panes to confirm the
    harness waits for the right cues before sending commands.
  - Exercise resizing scenarios: change terminal window sizes and tmux pane dimensions mid-run to verify the harness
    adjusts expectations for line wrapping and cursor positioning.
  - Test concurrency by driving multiple tmux sessions in parallel, ensuring session targeting (e.g.,
    session:window.pane) remains unambiguous and no cross-talk occurs.
  - Simulate tmux server restarts or socket loss during automation to confirm reconnection logic, retry policies, and
    error reporting are robust.
  - Verify logging and transcript capture include both tmux metadata (session/window/pane IDs) and command I/O so
    failures can be replayed precisely.
  - Inject fault cases such as hung commands, partial screen updates, or panes flooding with output to confirm timeouts,
    throttling, and cleanup routines behave correctly.
  - Run harness tests under different tmux configurations (custom status bars, alternate key bindings, mouse on/off) to
    ensure assumptions about default settings do not break automation.


› Summarize recent commits

  100% context left · ? for shortcuts
