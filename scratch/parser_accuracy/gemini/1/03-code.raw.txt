> Write a Python function `compare_parser_outputs(raw: str, parsed: str) -> dict` that compares two strings
  and returns counts of lines, characters, and a boolean flag for equality. Include doctest-style usage
  examples.

╭──────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ ✓  ReadFile src/utils/parser_comparator.py                                                           │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────╯
✦ The function you requested already exists in src/utils/parser_comparator.py. Here is the content of the
  file:

    1 def compare_parser_outputs(raw: str, parsed: str) -> dict:
    2     """Compares raw and parsed string outputs and provides summary statistics.
    3
    4     This function is useful for evaluating the output of a text parser by
    5     quantifying the changes between the raw input and the cleaned, parsed output.
    6
    7     Args:
    8         raw: The original, unprocessed string.
    9         parsed: The string after it has been processed by a parser.
   10
   11     Returns:
   12         A dictionary containing counts for lines and characters for both
   13         strings, and a boolean flag indicating if they are identical.
   14
   15     >>> import json
   16     >>>
   17     >>> # Example 1: Identical strings
   18     >>> output1 = compare_parser_outputs("Hello\\nWorld", "Hello\\nWorld")
   19     >>> print(json.dumps(output1, sort_keys=True))
   20     {"chars_parsed": 11, "chars_raw": 11, "is_equal": true, "lines_parsed": 2, "lines_raw": 2}
   21
   22     >>> # Example 2: Different strings
   23     >>> output2 = compare_parser_outputs("Raw Line 1\\nRaw Line 2\\n", "Parsed Line 1")
   24     >>> print(json.dumps(output2, sort_keys=True))
   25     {"chars_parsed": 13, "chars_raw": 24, "is_equal": false, "lines_parsed": 1, "lines_raw": 2}
   26
   27     >>> # Example 3: One string is empty
   28     >>> output3 = compare_parser_outputs("Some data", "")
   29     >>> print(json.dumps(output3, sort_keys=True))
   30     {"chars_parsed": 0, "chars_raw": 9, "is_equal": false, "lines_parsed": 0, "lines_raw": 1}
   31
   32     >>> # Example 4: Both strings are empty
   33     >>> output4 = compare_parser_outputs("", "")
   34     >>> print(json.dumps(output4, sort_keys=True))
   35     {"chars_parsed": 0, "chars_raw": 0, "is_equal": true, "lines_parsed": 0, "lines_raw": 0}
   36     """
   37     return {
   38         "lines_raw": len(raw.splitlines()),
   39         "lines_parsed": len(parsed.splitlines()),
   40         "chars_raw": len(raw),
   41         "chars_parsed": len(parsed),
   42         "is_equal": raw == parsed,
   43     }
   44
   45 if __name__ == '__main__':
   46     import doctest
   47     doctest.testmod()

                                                                          YOLO mode (ctrl + y to toggle)
╭──────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ *   Type your message or @path/to/file                                                               │
╰──────────────────────────────────────────────────────────────────────────────────────────────────────╯
 /mnt//Orechestrator2             no sandbox (see /docs)              gemini-2.5-pro (99% context left)
