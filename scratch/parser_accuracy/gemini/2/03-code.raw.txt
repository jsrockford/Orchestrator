> Write a Python function `compare_parser_outputs(raw: str, parsed: str) -> dict` that compares two strings and returns counts of lines, characters, and a boolean flag for equality. Include
  doctest-style usage examples.

╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ ✓  WriteFile Writing to src/utils/parser_comparator.py                                                                                                                                             │
│                                                                                                                                                                                                    │
│     1   def compare_parser_outputs(raw: str, parsed: str) -> dict:                                                                                                                                 │
│     2 -     """Compares raw and parsed string outputs and provides summary statistics.                                                                                                             │
│     2 +     """Compares two strings (raw and parsed) and returns statistics.                                                                                                                       │
│     3                                                                                                                                                                                              │
│     4 -     This function is useful for evaluating the output of a text parser by                                                                                                                  │
│     5 -     quantifying the changes between the raw input and the cleaned, parsed output.                                                                                                          │
│     4 +     This function is useful for analyzing the output of a parser against its                                                                                                               │
│     5 +     raw input, providing quick metrics on line counts, character counts, and                                                                                                               │
│     6 +     whether the strings are identical.                                                                                                                                                     │
│     7                                                                                                                                                                                              │
│     7 -     Args:                                                                                                                                                                                  │
│     8 -         raw: The original, unprocessed string.                                                                                                                                             │
│     9 -         parsed: The string after it has been processed by a parser.                                                                                                                        │
│     8 +     Usage examples (doctest-style):                                                                                                                                                        │
│     9                                                                                                                                                                                              │
│    11 -     Returns:                                                                                                                                                                               │
│    12 -         A dictionary containing counts for lines and characters for both                                                                                                                   │
│    13 -         strings, and a boolean flag indicating if they are identical.                                                                                                                      │
│    10 +     >>> compare_parser_outputs("line 1\nline 2", "line 1\nline 2")                                                                                                                         │
│    11 +     {'lines_raw': 2, 'lines_parsed': 2, 'chars_raw': 13, 'chars_parsed': 13, 'is_equal': True}                                                                                             │
│    12                                                                                                                                                                                              │
│    15 -     >>> import json                                                                                                                                                                        │
│    16 -     >>>                                                                                                                                                                                    │
│    17 -     >>> # Example 1: Identical strings                                                                                                                                                     │
│    18 -     >>> output1 = compare_parser_outputs("Hello\nWorld", "Hello\nWorld")                                                                                                                   │
│    19 -     >>> print(json.dumps(output1, sort_keys=True))                                                                                                                                         │
│    20 -     {"chars_parsed": 11, "chars_raw": 11, "is_equal": true, "lines_parsed": 2, "lines_raw": 2}                                                                                             │
│    13 +     >>> compare_parser_outputs("line 1\nline 2\nline 3", "line 1\nline 2")                                                                                                                 │
│    14 +     {'lines_raw': 3, 'lines_parsed': 2, 'chars_raw': 20, 'chars_parsed': 13, 'is_equal': False}                                                                                            │
│    15                                                                                                                                                                                              │
│    ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ │
│    22 -     >>> # Example 2: Different strings                                                                                                                                                     │
│    23 -     >>> output2 = compare_parser_outputs("Raw Line 1\nRaw Line 2\n", "Parsed Line 1")                                                                                                      │
│    24 -     >>> print(json.dumps(output2, sort_keys=True))                                                                                                                                         │
│    25 -     {"chars_parsed": 13, "chars_raw": 24, "is_equal": false, "lines_parsed": 1, "lines_raw": 2}                                                                                            │
│    16 +     >>> compare_parser_outputs("hello", "hello ")                                                                                                                                          │
│    17 +     {'lines_raw': 1, 'lines_parsed': 1, 'chars_raw': 5, 'chars_parsed': 6, 'is_equal': False}                                                                                              │
│    18                                                                                                                                                                                              │
│    ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ │
│    27 -     >>> # Example 3: One string is empty                                                                                                                                                   │
│    28 -     >>> output3 = compare_parser_outputs("Some data", "")                                                                                                                                  │
│    29 -     >>> print(json.dumps(output3, sort_keys=True))                                                                                                                                         │
│    30 -     {"chars_parsed": 0, "chars_raw": 9, "is_equal": false, "lines_parsed": 0, "lines_raw": 1}                                                                                              │
│    19 +     >>> compare_parser_outputs("", "")                                                                                                                                                     │
│    20 +     {'lines_raw': 0, 'lines_parsed': 0, 'chars_raw': 0, 'chars_parsed': 0, 'is_equal': True}                                                                                               │
│    21                                                                                                                                                                                              │
│    ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════ │
│    32 -     >>> # Example 4: Both strings are empty                                                                                                                                                │
│    33 -     >>> output4 = compare_parser_outputs("", "")                                                                                                                                           │
│    34 -     >>> print(json.dumps(output4, sort_keys=True))                                                                                                                                         │
│    35 -     {"chars_parsed": 0, "chars_raw": 0, "is_equal": true, "lines_parsed": 0, "lines_raw": 0}                                                                                               │
│    22 +     Args:                                                                                                                                                                                  │
│    23 +         raw: The raw, unprocessed string.                                                                                                                                                  │
│    24 +         parsed: The processed string after parsing.                                                                                                                                        │
│    25 +                                                                                                                                                                                            │
│    26 +     Returns:                                                                                                                                                                               │
│    27 +         A dictionary containing the following keys:                                                                                                                                        │
│    28 +         - 'lines_raw': Number of lines in the raw string.                                                                                                                                  │
│    29 +         - 'lines_parsed': Number of lines in the parsed string.                                                                                                                            │
│    30 +         - 'chars_raw': Number of characters in the raw string.                                                                                                                             │
│    31 +         - 'chars_parsed': Number of characters in the parsed string.                                                                                                                       │
│    32 +         - 'is_equal': True if the strings are identical, False otherwise.                                                                                                                  │
│    33       """                                                                                                                                                                                    │
│    34       return {                                                                                                                                                                               │
│    38 -         "lines_raw": len(raw.splitlines()),                                                                                                                                                │
│    39 -         "lines_parsed": len(parsed.splitlines()),                                                                                                                                          │
│    40 -         "chars_raw": len(raw),                                                                                                                                                             │
│    41 -         "chars_parsed": len(parsed),                                                                                                                                                       │
│    42 -         "is_equal": raw == parsed,                                                                                                                                                         │
│    35 +         'lines_raw': len(raw.splitlines()),                                                                                                                                                │
│    36 +         'lines_parsed': len(parsed.splitlines()),                                                                                                                                          │
│    37 +         'chars_raw': len(raw),                                                                                                                                                             │
│    38 +         'chars_parsed': len(parsed),                                                                                                                                                       │
│    39 +         'is_equal': raw == parsed,                                                                                                                                                         │
│    40       }                                                                                                                                                                                      │
│    41                                                                                                                                                                                              │
│    42   if __name__ == '__main__':                                                                                                                                                                 │
╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
✦ I have created the function and placed it in src/utils/parser_comparator.py. It includes the requested logic and doctests.

                                                                                                                                                                        YOLO mode (ctrl + y to toggle)
╭────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╮
│ *   Type your message or @path/to/file                                                                                                                                                             │
╰────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────╯
 /mnt/f/PROGRAMMING_PROJECTS/Orechestrator2                                                 no sandbox (see /docs)                                                  gemini-2.5-pro (99% context left)

